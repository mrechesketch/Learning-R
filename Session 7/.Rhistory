list(9)
list( c(1), c(2), c(3))
c( c(1), c(2), c(3))
list()
3vec <- c(2,3,1)
threeVec <- c(2,3,1)
list( threeVec[1:2], threeVec[2:3], threeVec[3:3])  
list( threeVec[1:1], threeVec[2:2], threeVec[3:3])  
int(4/3)
as.int(4/3)
4/3
int
floor
floor(4/3)
source("homework.R")
testsplit3()
source("homework.R")
testsplit3()
split3(threeVec)
source("homework.R")
split3(threeVec)
source("homework.R")
split3(threeVec)
source("homework.R")
testsplit3()
source("homework.R")
testsplit3()
source("homework.R")
split3(fiveVec)
split3(fourVec)
len(fiveVec)
length(fiveVec)
len <- length(fiveVec)
first <- floor(len/3)
first
second(len/3)*2
second <- floor(len/3)*2
second
floor(len*2/3)
floor(4*2/3)
source("homework.R")
testsplit3()
split3( c(1:100))
split3( c(1:101))
split3( c(1:99))
q()
library(hashmap)
get.packages(hashmap)
install.packages("hashmap")
library(hashmap)
library(set)
set
set.
hashmap('aba', 9)
'aba'
d <- hashmap('aba', 9)
d['aba']
str(d)
d$has_key('aba')
d$find('aba')
d$add
d$insert('g', 0)
d
EE <- new.env(hash = TRUE)
character(9)
source("ParenthesisChecker.R")
source("ParenthesisChecker.R")
source("ParenthesisChecker.R")
Counter_(9)
Counter()
c <- Counter()
c
c$push()
source("ParenthesisChecker.R")
c <- Counter()
c$push()
str(c)
source("ParenthesisChecker.R")
c <- Counter()
c$push()
source("ClosureCheckerTests.R")
stackTests()
q()
list("{", "(")
library(hashmap)
install.packages(hashmap)
source("exercise")
source("exercise.R")
source
source("exercises.R")
union(openers, closers)
sapply(openers, function(x) length(x))
openers
length("poop")
sapply(openers, function(x) nchar(x))
closerDict(closers, openers)
closerDict <- hashmap(closers, openers)
closerDict
closerDict.keys()
closerDict$keys()
closerDict$keys() == closers
reverse(closers)
rev(closers)
closerDict$keys() == rev(closers)
identical(closerDict$keys(),rev(closers))
sapply(openers, function(x) nchar(x))
os <- sapply(openers, function(x) nchar(x))
cs <- sapply(closers, function(x), nchar(x))
cs <- sapply(closers, function(x) nchar(x))
cs
union(os, cs)
is.element("{", openers)
sort
sort(union(os,cs))
"poop" == "poop"
substr("poop", 1, 3)
q()
source("ClosureCheckerTests.R")
source("ClosureCheckerTests.R")
source("ClosureCheckerTests.R")
library("hashmap")
hashmap
hashmap()
source("ClosureCheckerTests.R")
source("ClosureCheckerTests.R")
source("ClosureCheckerTests.R")
emptyTest()
source("ClosureCheckerTests.R")
emptyTest()
q()
