source("MFR.R")
source("MFR.R")
result
rbind(powers, bases)
hmm <- rbind(powers, bases)
hmm$powers
str(hmm)
Map( function(x,y) c(x,y), bases, powers )
Filter(function(x) x, c() )
grepl
grepl("h", "hey")
grepl("h", strsplit("hey"))
grepl("h", strsplit("hey", ""))
grep("h", strsplit("hey", ""))
grep("h", strsplit("heh hy", ""))
grep
grep("h", "o")
grep("h", "h")
grep("h", "hh")
grep("h", "h h")
grep("h"," ooh")
grep("h", strplit("hehy", ""))
grep("h", strsplit("hehy", ""))
strsplit("hehy", "")
grep("h", strsplit("hehy", "")[[1]])
grep("", strsplit("hehy", "")[[1]])
grep("h", strsplit("", "")[[1]])
grepl("r", strsplit("racecars", "")[[1]])
sum(grepl("r", strsplit("racecars", "")[[1]]))
Reduce(+, c(1:10) )
Reduce(+ c(1:10) )
Reduce(function(x,y) x+y c(1:10) )
Reduce(function(x,y) x+y, c(1:10) )
Reduce(function(x,y) x+y, c(1:10) )
Reduce(function(x,y) x*y, c(1:10) )
paste("jd", "jello")
paste("jd", "jello", "ok")
char
nchar("why")
nchar("why")/2
as.integer(nchar("why")/2)
substr("why", 1, 2)
nchar("whyy")/2
substr("whyy", 1, 2)
substr("whyy", 2, 2)
substr("whyy", 2, 4)
substr("whyy", 3, 4)
source("MFR.R")
midInsert("hello", "ok")
substr("hello", 1, 3)
source("MFR.R")
midInsert("hello", "ok")
Reduce(midInsert, mysteryVec)
source("MFR.R")
Reduce(midInsert, mysteryVec)
setwd("../Session 14")
source("floydWarshall.R")
shortestPath('2', '1', edges)
shortestPath('1', '3', edges)
shortestPath('1', '4', edges)
shortestPath('4', '4', edges)
shortestPath('4', '2', edges)
shortestPath('3', '2', edges)
shortestPath('1', '2', edges)
shortestPath('1', '3', edges)
min(1, 0)
min(-1, 0)
source("floydWarshall.R")
shortestPath('1', '3', edges)
source("floydWarshall.R")
shortestPath('1', '3', edges)
source("floydWarshall.R")
shortestPath('1', '3', edges)
shortestPath('4', '1', edges)
shortestPath('4', '4', edges)
shortestPath('4', '3', edges)
shortestPath('2', '3', edges)
source("floydWarshall.R")
shortestPath('2', '3', edges)
shortestPath('2', '3', edges)
shortestPath('2', '1', edges)
shortestPath('3', '1', edges)
shortestPath('3', '2', edges)
source("floydWarshall.R")
shortestPath('3', '2', edges)
shortestPath('1', '3', edges)
shortestPath('2', '4', edges)
shortestPath('1', '2', edges)
shortestPath('3', '2', edges)
shortestPath('3', '1', edges)
shortestPath('1', '4', edges)
options(expressions=10000)
shortestPath('3', '1', edges)
pathExists('3', '1', edges)
e <- list()
e
length(e)
e[-1]
e[[1]]
pathExists('4', '2', edges)
shortestPath('4', '2', edges)
q()
